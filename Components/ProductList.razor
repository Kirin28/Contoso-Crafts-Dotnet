@using Microsoft.AspNetCore.Components.Web
@using MyWebApplication.Models
@using MyWebApplication.Services
@inject JsonFileProductService ProductService

<h3 class="text-center">Product List</h3>
<div class="row row-cols-1 row-cols-md-3 g-4">
    @foreach (var product in ProductService.GetProducts())
    {
        <div class="col">
        <div class="card">
            <img src="@product.Image" class="card-img-top" alt="">
            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    @if (product != null) {
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productModal" @onclick="(e => SelectProduct(product?.Id ?? string.Empty))">
                                More Info
                            </button>
                    }
                </small>
            </div>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle">
    <div class="modal-dialog modal-dialog-centered" role="document">
        @if (selectedProduct != null)
        {
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                     <div class="card">
            <img src="@selectedProduct.Image" class="card-img-top"  alt="">
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@

@code {
    Product? selectedProduct;
    string? selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

@*     void SelectProduct(string? productId)
    {
        try
        {
            if (productId != null)
            {
                selectedProductId = productId;
                selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
                GetCurrentRating();
            }
            else
            {
                throw new NullReferenceException();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.StackTrace);
        }
        
    } *@

    int currentRating = 0;
    int voteCount = 0;
    string? voteLabel;
    void GetCurrentRating()
    {
        if(selectedProduct?.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }
        System.Console.WriteLine($"Current rating for {selectedProduct?.Id}: {currentRating}");
    }
    void SubmitRating(int rating)
    {
         System.Console.WriteLine($"Rating received for {selectedProduct?.Id}: {rating}");
         if (selectedProductId == null) return;
         
         ProductService.AddRating(selectedProductId, rating);
         SelectProduct(selectedProductId);
    }
}